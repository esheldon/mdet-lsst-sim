#!/usr/bin/env python
import os
import argparse
import shutil


def get_script_file():
    return 'run.sh'


def get_test_script_file():
    return 'test.sh'


def copy_config_file(config_file):
    print('copying', config_file)
    shutil.copy(config_file, '.')


def get_name_base(run, seed):
    return '%s-%04d' % (run, seed)


def get_lsf_script_file(run, seed):
    name = get_name_base(run, seed)
    return '%s.lsf' % name


LSF_TEMPLATE = r"""#!/bin/bash
#BSUB -J "%(run)s[1-%(njobs)d]"
#BSUB -n 1
#BSUB -oo ./%(run)s.oe
#BSUB -W %(walltime)s
#BSUB -R "linux64 && rhel60 && scratch > 2"

echo "working on host: $(hostname)"

./run.sh %(run)s
"""

SCRIPT_TEMPLATE = r"""#!/bin/bash

run=$1

seed=$(randint)
output="${run}-${seed}.fits.gz"
config=%(config)s

export OMP_NUM_THREADS=1

%(command)s \
    --seed ${seed} \
    --config ${config} \
    --ntrial %(ntrial)d \
    --output ${output} > /dev/null
"""

TEST_SCRIPT_TEMPLATE = r"""#!/bin/bash

seed=$(randint)
output="/tmp/test-${seed}.fits.gz"
config=%(config)s

export OMP_NUM_THREADS=1

%(command)s \
    --seed ${seed} \
    --config ${config} \
    --ntrial 3 \
    --output ${output}
"""


def write_script(*, ntrial, sim_config, command):

    data = [
        (get_script_file(), SCRIPT_TEMPLATE),
        (get_test_script_file(), TEST_SCRIPT_TEMPLATE),
    ]

    for script_file, script_template in data:
        print('writing:', script_file)
        with open(script_file, 'w') as fobj:
            text = script_template % {
                'ntrial': ntrial,
                'config': sim_config,
                'command': command,
            }
            fobj.write(text)

        os.system('chmod 755 %s' % script_file)


def get_args():
    parser = argparse.ArgumentParser()
    parser.add_argument('--run', required=True)
    parser.add_argument('--index', type=int, required=True,
                        help='index for file name')
    parser.add_argument('--njobs', type=int, required=True)
    parser.add_argument('--ntrial', type=int, required=True,
                        help='number of sim pairs to run for each job')
    parser.add_argument('--config', required=True, help='config file')

    parser.add_argument('--walltime', required=True,
                        help=('walltime for each job, e.g. 4:00'))

    parser.add_argument('--phot', action='store_true')

    return parser.parse_args()


def get_command_from_config_file(config_file):
    import yaml
    with open(config_file) as fobj:
        config = yaml.load(fobj, Loader=yaml.SafeLoader)

    if config.get('do_photometry', False):
        command = 'mdet-lsst-sim-phot'
    else:
        command = 'mdet-lsst-sim'

    return command


def main():
    args = get_args()

    command = get_command_from_config_file(args.config)

    copy_config_file(args.config)
    sim_config_base = os.path.basename(args.config)

    lsf_file = get_lsf_script_file(args.run, args.index)

    if os.path.exists(lsf_file):
        raise RuntimeError('script already exists: %s' % lsf_file)

    write_script(
        ntrial=args.ntrial,
        sim_config=sim_config_base,
        command=command,
    )

    with open(lsf_file, 'w') as fobj:
        job_text = LSF_TEMPLATE % {
            'run': args.run,
            'njobs': args.njobs,
            'walltime': args.walltime,
        }

        fobj.write(job_text)

    print(lsf_file)
    print('wrote:', args.njobs)


main()
