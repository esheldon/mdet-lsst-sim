#!/usr/bin/env python
import os
import numpy as np
import argparse
import shutil


CONDOR_SUBMIT_HEAD = """
Universe = vanilla

Notification = Never

# Run this exe with these args
Executable = run.sh

# Image_Size =  2500000
request_memory = %(mem)s

GetEnv = True

kill_sig = SIGINT

should_transfer_files = YES
transfer_input_files = %(sim_config)s

# so transfer when the job completes
when_to_transfer_output = ON_EXIT

environment = "OMP_NUM_THREADS=1"

+Experiment = "astro"
"""

CONDOR_JOB_TEMPLATE = """
+job_name = "%(job_name)s"
transfer_output_files = %(output)s
Arguments = %(seed)d %(output)s
Queue
"""  # noqa


def get_script_file():
    return 'run.sh'


def copy_config_file(config_file):
    print('copying', config_file)
    shutil.copy(config_file, '.')


def get_name_base(run, seed):
    return '%s-%010d' % (run, seed)


def get_condor_script_file(run, seed):
    name = get_name_base(run, seed)
    return '%s.condor' % name


def get_output(run, seed):
    name = get_name_base(run, seed)
    return '%s.fits.gz' % name


SCRIPT_TEMPLATE = r"""#!/usr/bin/bash

set -e
export OMP_NUM_THREADS=1

seed=$1
output=$2

%(command)s \
    --seed ${seed} \
    --config %(sim_config)s \
    --ntrial %(ntrial)d \
    --output ${output} &> /dev/null
"""


def write_script(*, ntrial, sim_config, command):

    script_file = get_script_file()
    print('writing:', script_file)
    with open(script_file, 'w') as fobj:
        text = SCRIPT_TEMPLATE % {
            'command': command,
            'ntrial': ntrial,
            'sim_config': sim_config,
        }
        fobj.write(text)

    os.system('chmod 755 %s' % script_file)


def get_args():
    parser = argparse.ArgumentParser()
    parser.add_argument('--run', required=True)
    parser.add_argument('--seed', type=int, required=True, help='seed for rng')
    parser.add_argument('--njobs', type=int, required=True)
    parser.add_argument('--ntrial', type=int, required=True,
                        help='number of sim pairs to run for each job')
    parser.add_argument('--config', required=True, help='config file')

    parser.add_argument('--mem', default='2G', help='expected mem usage')

    return parser.parse_args()


def get_command_from_config_file(config_file):
    import yaml
    with open(config_file) as fobj:
        config = yaml.load(fobj, Loader=yaml.SafeLoader)

    if config.get('do_photometry', False):
        command = 'mdet-lsst-sim-phot'
    else:
        command = 'mdet-lsst-sim'

    return command


def main():
    args = get_args()

    command = get_command_from_config_file(args.config)

    copy_config_file(args.config)
    sim_config_base = os.path.basename(args.config)

    rng = np.random.RandomState(args.seed)

    condor_file = get_condor_script_file(args.run, args.seed)

    if os.path.exists(condor_file):
        raise RuntimeError('script already exists: %s' % condor_file)

    write_script(
        ntrial=args.ntrial,
        sim_config=sim_config_base,
        command=command,
    )

    with open(condor_file, 'w') as fobj:
        fobj.write(CONDOR_SUBMIT_HEAD % {
            'sim_config': sim_config_base,
            'mem': args.mem,
        })

        for i in range(args.njobs):

            seed = rng.randint(0, 2**31)
            output = get_output(args.run, seed)
            job_name = '%s-%010d' % (args.run, seed)

            job_text = CONDOR_JOB_TEMPLATE % {
                'job_name': job_name,
                'seed': seed,
                'output': output,
            }

            fobj.write(job_text)

    print(condor_file)
    print('wrote:', args.njobs)


main()
